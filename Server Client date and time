Server (java)



import java.net.*;
import java.io.*;
import java.util.*;
class project

{
  public static void main(String args[]) throws Exception
    {
      ServerSocet s=new ServerSocket (43454);
      while(true)
      {
        System.out.println("Waiting For Connection...");
        Socket soc=s.accept();
        DataOutputStream out=new DataOutputStream(soc.getOutputStream());
        out.writeBytes("Server Date: " + (new Date()).toString() + "\n");
        out.close();
        soc.close();
        }
    }
}







Client (c)

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>
 
int main()
{
    int CreateSocket = 0,n = 0;
    char dataReceived[1024];
    struct sockaddr_in ipOfServer;
 
    memset(dataReceived, '0' ,sizeof(dataReceived));
 
    if((CreateSocket = socket(AF_INET, SOCK_STREAM, 0))< 0)
    {
        printf("Socket not created \n");
        return 1;
    }
 
    ipOfServer.sin_family = AF_INET;
    ipOfServer.sin_port = htons(43454);
    ipOfServer.sin_addr.s_addr = inet_addr("192.168.214.135");
 
    if(connect(CreateSocket, (struct sockaddr *)&ipOfServer, sizeof(ipOfServer))<0)
    {
        printf("Connection failed due to port and ip problems\n");
        return 1;
    }
 
    while((n = read(CreateSocket, dataReceived, sizeof(dataReceived)-1)) > 0)
    {
        dataReceived[n] = 0;
        if(fputs(dataReceived, stdout) == EOF)
        {
            printf("\nStandard output error");
        }
 
        printf("\n");
    }
 
    if( n < 0)
    {
        printf("Standard input error \n");
    }
 
    return 0;
}
